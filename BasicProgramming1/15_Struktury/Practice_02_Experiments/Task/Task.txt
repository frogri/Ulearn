ЭКСПЕРИМЕНТ 1. СОЗДАНИЕ МАССИВА
В файле ArrayCreationTasks.cs есть две реализации уже знакомого вам интерфейса ITask для работы с классом Benchmark. 
Оба класса создают массив в методе Run. Но один делает массив структур, а второй массив классов.

В классе ExperimentsTask реализуйте метод BuildChartDataForArrayCreation. 
Этот метод должен измерять длительность работы метода Run у классов StructArrayCreationTask и ClassArrayCreationTask с помощью Benchmark из прошлого задания.

Нужно измерить время для структур и классов всех размеров, указанных в Constants.FieldCounts. 
Результаты измерения вернуть в виде объекта ChartData. Дальше в Program.cs эти результаты будут показаны на графиках.

Запустите код на исполнение. 
Вы должны увидеть первый график скорости работы от количества полей в классе/структуре. 
На нём должно быть видно, что массивы классов создаются дольше, чем массивы структур.



ЭКСПЕРИМЕНТ 2. ПЕРЕДАЧА В МЕТОД
Аналогично в файле MethodCallTasks.cs есть ещё пара реализаций ITask. 
Они вызывают метод, передавая в качестве аргумента класс или структуру с большим количеством полей.

В том же классе ExperimentsTask реализуйте метод BuildChartDataForMethodCall.

Избавьтесь от дублирования кода в методах BuildChartDataForMethodCall и BuildChartDataForArrayCreation. 
Возможно, для этого понадобится создать новые классы.

Запустите код на исполнение. Вы должны увидеть второй график, показывающий, что большие классы передаются в метод быстрее, чем большие структуры.

Попробуйте объяснить наблюдаемый результат.



ПОДСКАЗКА
Избавиться от дублирования в коде BuildChartDataForMethodCall и BuildChartDataForArrayCreation поможет паттерн абстрактная фабрика.